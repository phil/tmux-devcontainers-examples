#! /usr/bin/env bash

echo "Running test suite ..."

current_dir=$(pwd)
tmux_plugin_dir="$TMUX_PLUGIN_MANAGER_PATH/tmux-devcontainers/"

source $tmux_plugin_dir/scripts/commands.sh

tests_passed=()
tests_failed=()

assert_equal() {
    local actual="$1"
    local expected="$2"

    if [ "$actual" != "$expected" ]; then
        # echo "Assertion failed: '$1' != '$2'"
        tests_failed+=("$expected")
        echo -e "\033[31mFAIL\033[0m"
        echo -e "\033[31mEXPECTED: $expected\033[0m"
        echo -e "\033[31mACTUAL:   $actual\033[0m"
    else
        tests_passed+=("$expected")
        echo -e "\033[32mPASS: $actual\033[0m"
    fi
}

for dir in */; do
    # Only run a single test
    # if [[ "$dir" != "devcontainer-image/" ]]; then
    #     continue
    # fi

    if [[ -d "$dir" ]]; then
        echo "=> $dir"
        cd "$dir"
        workspace=$($tmux_plugin_dir/scripts/statusbar/workspace.sh)

        # Ensure a clean state
        test_down

        status=$($tmux_plugin_dir/scripts/statusbar/status.sh)
        case $dir in
            "devcontainer-image/")
                assert_equal "$workspace" "RubyImageExampleProject"
                assert_equal "$status" "ruby:1-3.4-bullseye:unknown" ;;
            "devcontainer-dockerfile/")
                assert_equal "$workspace" "DockerFileExampleProject"
                assert_equal "$status" "Dockerfile:unknown" ;;
            "devcontainer-docker-compose-single/")
                assert_equal "$workspace" "SingleComposeProject"
                assert_equal "$status" "app:unknown database:unknown" ;;
            "devcontainer-docker-compose-multi/")
                assert_equal "$workspace" "MultiComposeProject"
                assert_equal "$status" "app:unknown database:unknown redis:unknown" ;;
        esac

        test_up

        status=$($tmux_plugin_dir/scripts/statusbar/status.sh)
        case $dir in
            "devcontainer-image/")
                assert_equal "$status" "ruby:1-3.4-bullseye:running" ;;
            "devcontainer-dockerfile/")
                assert_equal "$status" "Dockerfile:running" ;;
            "devcontainer-docker-compose-single/")
                assert_equal "$status" "app:running database:running" ;;
            "devcontainer-docker-compose-multi/")
                assert_equal "$status" "app:running database:running redis:running" ;;
        esac

        test_stop

        # Image based containers exit, compose based containers stop and are removed

        status=$($tmux_plugin_dir//scripts/statusbar/status.sh)
        case $dir in
            "devcontainer-image/")
                assert_equal "$status" "ruby:1-3.4-bullseye:exited" ;;
            "devcontainer-dockerfile/")
                assert_equal "$status" "Dockerfile:exited" ;;
            "devcontainer-docker-compose-single/")
                assert_equal "$status" "app:exited database:exited" ;;
            "devcontainer-docker-compose-multi/")
                assert_equal "$status" "app:exited database:exited redis:exited" ;;
        esac

        test_down

        status=$($tmux_plugin_dir/scripts/statusbar/status.sh)
        case $dir in
            "devcontainer-image/")
                assert_equal "$status" "ruby:1-3.4-bullseye:unknown" ;;
            "devcontainer-dockerfile/")
                assert_equal "$status" "Dockerfile:unknown" ;;
            "devcontainer-docker-compose-single/")
                assert_equal "$status" "app:unknown database:unknown" ;;
            "devcontainer-docker-compose-multi/")
                assert_equal "$status" "app:unknown database:unknown redis:unknown" ;;
        esac

        echo "---"
    fi
    cd "$current_dir"
done

echo -e "\033[37mTests passed: ${#tests_passed[@]}\033[0m"
for test in "${tests_passed[@]}"; do
    echo -e "\033[32m$test\033[0m"
done

echo -e "\033[37mTests failed: ${#tests_failed[@]}\033[0m"

for test in "${tests_failed[@]}"; do
    echo -e "\033[31m$test\033[0m"
done

echo "---"
echo "Remember to check for zombie bash processes ..."
echo "---"
echo "Finished test suite ..."

if [ ${#tests_failed[@]} -ne 0 ]; then
    exit 1
fi

